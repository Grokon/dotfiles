function __fish_prompt_set_chars --description "set char variables"

    set -u fish_emoji_width 3
    # put dirty branch indicator in prompt
    set -g __fish_git_prompt_char_dirtystate ↯
    set -g __fish_git_prompt_char_upstream_ahead 
    set -g __fish_git_prompt_char_upstream_behind 
    set -g __fish_git_prompt_char_upstream_diverged 
    set -g __fish_git_prompt_char_stashed ℎ
    set -g __fish_git_prompt_char_dirty_and_stashed ＊ ℎ

    set -g __fish_promt_char_separator ⎢ #\ue0c7\ue0c6 # %
    set -g __fish_promt_char_promt_start  #\uE0C5\ue0c7 #  
    set -g __fish_promt_char_promt_end  #\uE0C6\uE0C4 ' ' #  
    set -g __fish_promt_char_host  
    set -g __fish_promt_char_folder 

    set -g __fish_promt_bg_color 112e38 #373b41

    # SEPARATOR=" %F{$(( $DEFAULT_BACKGROUND - 3 ))}%f " # ╱ ⎢ 
    # START_PROMT=" %F{237}"
    # END_PROMT="%F{237} "
    # HOST_PROMT=" %F{038} %m"
    # FOLDER_PROMT="%F{109} %$(( $COLUMNS - 53 ))<...<%~%<<"

    # __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate '✔'
    # __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate '*' '✚'
    # __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate '#' '✖'
    # __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate '+' '●'
    # __fish_git_prompt_set_char __fish_git_prompt_char_stashstate '$' '⚑'
    # __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator ' ' '|'
    # __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles '%' '…'
    # __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead '>' '↑'
    # __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind '<' '↓'
    # __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
    # __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal '='
    # __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix ''

end

function __scripts_decrease_remaining_length
	set -g _scripts_remaining_length (expr $_scripts_remaining_length - $argv)
end

function __scripts_decorate

	__scripts_decrease_remaining_length (expr (expr length $argv[1]) + 6)
	#echo -n "─◁ "

	if [ (count $argv) -gt 1 ]
		set_color $argv[2..(count $argv)] --background $__fish_promt_bg_color
	end

	echo -n $argv[1]
	set_color $fish_color_normal
end

function __fish_promt_start_char
    printf (set_color $__fish_promt_bg_color)" $__fish_promt_char_promt_start"(set_color $fish_color_normal --background $__fish_promt_bg_color)" "
end

function __fish_promt_end_char
    set_color $fish_color_normal
    printf (set_color $__fish_promt_bg_color)"$__fish_promt_char_promt_end"
    set_color $fish_color_normal
    printf " "
end

function __fish_promt_separator
    printf (set_color black --background $__fish_promt_bg_color)" $__fish_promt_char_separator "
end


function fish_prompt

    __fish_prompt_set_chars
    set -g _scripts_remaining_length (expr $COLUMNS)    

    test $SSH_TTY
    and printf (set_color red)'['$USER(set_color yellow)'@'(prompt_hostname)'] '
    test $USER = 'root'
    and echo (set_color red)"#"

    set is_git (command git rev-parse --is-inside-work-tree 2> /dev/null)
    set git_branch (command git rev-parse --abbrev-ref HEAD 2> /dev/null)
    set git_tracked (git for-each-ref --format='%(upstream:short)' (command git symbolic-ref -q HEAD 2> /dev/null) 2> /dev/null)
    set git_stashed (command git rev-parse --verify --quiet refs/stash 2> /dev/null)

    set -l submodule_syntax
    set submodule_syntax "--ignore-submodules=dirty"
    set git_dirty (command git status -s $submodule_syntax  2> /dev/null)



    if [ "$is_git" ]
        set git_behind (command git rev-list "$git_branch".."$git_tracked" --count 2> /dev/null)
        set git_ahead (command git rev-list "$git_tracked".."$git_branch" --count 2> /dev/null)

        set git_status "   $git_branch"
        if [ -n "$git_dirty" ]
            if [ "$git_stashed" ]
                set git_full "$git_status$__fish_git_prompt_char_dirty_and_stashed"
            else
                set git_full "$git_status$__fish_git_prompt_char_dirtystate"
            end
        else
            if [ "$git_stashed" ]
                set git_full "$git_status $__fish_git_prompt_char_stashed"
            else
                set git_full "$git_status"
            end
        end

        if test $git_behind -gt 0
            set git_full "$git_full $git_behind$__fish_git_prompt_char_upstream_behind"
        end
        if test $git_ahead -gt 0
            set git_full "$git_full $git_ahead$__fish_git_prompt_char_upstream_ahead"
        end
    end

    #echo $__fish_promt_char_promt_start
    __fish_promt_start_char
    __scripts_decorate (prompt_pwd) cyan
    __fish_promt_separator
    __scripts_decorate "$git_full " 87af5f
    #(set_color 87af5f)
    __fish_promt_end_char

    #echo $__fish_promt_char_promt_end

end